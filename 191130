
%% Load the image
A = imread('/Users/sidsd27/Downloads/snap.jpg');
imshow(A)
hold on
figure(1)
title('Here is the original image')
imshow(A);
%% Split channels into RGB
RC = A(:,:,1); % Red channel
GC = A(:,:,2); % Green channel
BC = A(:,:,3); %blueChannel

%% User, select your region of interest please
 % Red channel
     
figure, imshow(A)
h = drawfreehand;
mask= createMask(h,A);
imshow(mask);
hold on 
RC(~mask) = false;
BC(~mask) = false;
GC(~mask) = false;
figure(2) 
title('Here is the cropped image - red and green channel')
imshowpair(RC,GC, 'montage')
hold on 

%% Image pre-processing steps

% Sharpen all 3  channels
% Note that 'Radius' controls the number of edge pixels that are being sharpened
% 'Amount' controls the sensitivity
RC = imsharpen(RC, 'Radius', 4, 'Amount', 1);
GC = imsharpen(GC,'Radius', 4, 'Amount', 1);
BC = imsharpen(BC,'Radius', 4, 'Amount', 1);
figure(3)
title('Here is the sharpened image')
imshowpair(RC, GC, 'montage'); %Here's a sample of the red and green for your amusement
hold on
%% Now employ imadjust.
%maps the intensity values in grayscale image I
%to new values in J. By default, imadjust saturates the bottom 1% and the top 1% of all pixel values.
%This operation increases the contrast of the output image J.
%Red channel first

JRC = imadjust(RC);
figure(4)
title('Intensity adjusted- red')
imshowpair(RC, JRC, 'montage')
hold on

%Red channel first

JBC = imadjust(BC);
figure(5)
title('Intensity adjusted- blue')
imshowpair(BC, JBC, 'montage')
hold on

%Red channel first

JGC = imadjust(GC);
figure(6)
title('Intensity adjusted- green')
imshowpair(GC, JGC, 'montage')
hold on


%% Now, for some denoising and watershed algorithming
%Let's get this red
figure(5)
thresh = graythresh(JRC);
JRC= wiener2(JRC);
JRC = imbinarize(JRC, thresh);
D = -bwdist(~JRC);
L = watershed(D);
JRC(L==0) = 0;
JRC= imclearborder(JRC);
JRC = imfill(JRC, 'holes');
title('fully processed red')
imshowpair(A, JRC, 'montage');
hold on
%%
figure(6) % Now for the green. Happy St.Pat's, bitches
thresh = graythresh(JGC);
JGC= wiener2(JGC);
JGC = imbinarize(JGC, thresh);
D = -bwdist(~JGC);
L = watershed(D);
JGC(L==0) = 0;
JGC= imclearborder(JGC);
JGC = imfill(JGC, 'holes');
title('fully processed green')
imshowpair(A, JGC, 'montage');

hold on
%%
figure(7) % Now for the blue, just like my mood.
thresh = graythresh(JBC);
JBC= wiener2(JBC);
JBC = imbinarize(JBC, thresh);
D = -bwdist(~JBC);
L = watershed(D);
JBC(L==0) = 0;
JBC= imclearborder(JBC);
JBC = imfill(JBC, 'holes');
title('fully processed blue')
imshowpair(A, JBC, 'montage');

hold on


%Don't freak out if you see too many centroids, could just be your channel
%% Red Centroids

statsR = regionprops('table', JRC,'Centroid', 'Area');
figure(8)
imshow(JRC)
hold on
plot(statsR.Centroid(:,1), statsR.Centroid(:,2), 'r*');
hold off
figure(9)
imshow(A);

%% Green Centroids
statsG = regionprops('table', JGC,'Centroid', 'Area');
figure(10)
imshow(JGC)
hold on
plot(statsG.Centroid(:,1), statsG.Centroid(:,2), '.');
hold off
figure(11)
imshow(A);

%% Blue Centroids

statsB = regionprops('table', JBC,'Centroid', 'Area');
figure(12)
imshow(JBC)
hold on
plot(statsB.Centroid(:,1), statsB.Centroid(:,2), 'r*');
hold off
figure(13)
imshow(A);
%%
%Cool, so we have some really snazzy centroid. Now to actually use this data
% We can first plot a histogram of the number of centroids of
% each color
SR= size(statsR.Centroid(:,1));
GR= size(statsG.Centroid(:,1));
BR= size(statsB.Centroid(:,1));
Red_puncta= SR(:,1)
Green_puncta= GR(:,1)
Blue_puncta = BR(:,1)

Ratio_RG = Red_puncta/Green_puncta
Ratio_RB = Red_puncta/Blue_puncta
Ratio_BG = Blue_puncta/Green_puncta

%%
% So, now we have this really basic information about the images
% Our next step is to idenitfy dendrites with considerable accuracy
% and find a way to calculate the number of puncta/dedndrite.
A = imread('/Users/sidsd27/Downloads/snap.jpg');
A(:,:,2) = 0; %if the noise is green in color
[L,C] = imsegkmeans(A,3);
A = label2rgb(L,im2double(C));
se = strel('sphere', 1);
A = imdilate(A, se);


figure(68)
imshow(A)
hold on 
%% Use the fibermetric algorithm 
C=A;
A = fibermetric(A,'ObjectPolarity','bright');
A(~A) = true;
figure(69)
imshow(A)
hold on
thresh = graythresh(A(:,:,1));
 A = imbinarize(A(:,:,1), thresh);
A=imfill(A, 'holes');
A = imcomplement(A);
figure(1)
imshowpair(C,A, 'montage');
hold on 
%%
figure(2)
se = strel('sphere', 6);
A = imdilate(A, se);
imshow(A)
hold on 

%%

skel = bwskel(A, 'MinBranchLength', 30);
skel = imclose(skel,se);
figure(3)
imshowpair(C, skel, 'montage')
hold on 

%% Geodesic distance trasnform 

B = bwmorph(skel, 'branchpoints');
E = bwmorph(skel, 'endpoints');
[y,x] = find(E);
B_loc = find(B);
Dmask = false(size(skel));
for k = 1:numel(x)
    D = bwdistgeodesic(skel,x(k),y(k));
    distanceToBranchPt = min(D(B_loc)) + 20;
    Dmask(D < distanceToBranchPt) =true;
end
skelD = skel - Dmask;
figure(4)
imshow(skelD);
hold all;
[y,x] = find(B); plot(x,y,'ro')

figure(5)
imshowpair(C, skel, 'montage');
hold on

figure(6)
imshow(Dmask)



















